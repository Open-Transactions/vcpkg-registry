diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c	2024-01-29 10:45:34.019125935 -0600
@@ -28,14 +28,14 @@
 # include "blake2b-compress-avx2.h"
 
 CRYPTO_ALIGN(64)
-static const uint64_t blake2b_IV[8] = {
+static const uint64_t sodium_blake2b_IV[8] = {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
     0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
 };
 
 int
-blake2b_compress_avx2(blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
+sodium_blake2b_compress_avx2(sodium_blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
 {
     __m256i a = LOADU(&S->h[0]);
     __m256i b = LOADU(&S->h[4]);
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h	2024-01-29 10:40:12.032874929 -0600
@@ -1,6 +1,6 @@
 
-#ifndef blake2b_compress_avx2_H
-#define blake2b_compress_avx2_H
+#ifndef sodium_blake2b_compress_avx2_H
+#define sodium_blake2b_compress_avx2_H
 
 #define LOADU128(p) _mm_loadu_si128((const __m128i *) (p))
 #define STOREU128(p, r) _mm_storeu_si128((__m128i *) (p), r)
@@ -129,9 +129,9 @@
         DECLARE_MESSAGE_WORDS(m)                                          \
         const __m256i iv0 = a;                                            \
         const __m256i iv1 = b;                                            \
-        __m256i       c   = LOAD(&blake2b_IV[0]);                         \
+        __m256i       c   = LOAD(&sodium_blake2b_IV[0]);                         \
         __m256i       d =                                                 \
-            XOR(LOAD(&blake2b_IV[4]), _mm256_set_epi64x(f1, f0, t1, t0)); \
+            XOR(LOAD(&sodium_blake2b_IV[4]), _mm256_set_epi64x(f1, f0, t1, t0)); \
         BLAKE2B_ROUNDS_V1(a, b, c, d, m);                                 \
         a = XOR(a, c);                                                    \
         b = XOR(b, d);                                                    \
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c	2024-01-29 10:45:33.989129080 -0600
@@ -6,13 +6,13 @@
 #include "private/common.h"
 
 CRYPTO_ALIGN(64)
-static const uint64_t blake2b_IV[8] = {
+static const uint64_t sodium_blake2b_IV[8] = {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
     0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
 };
 
-static const uint8_t blake2b_sigma[12][16] = {
+static const uint8_t sodium_blake2b_sigma[12][16] = {
     { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
     { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },
     { 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },
@@ -28,7 +28,7 @@
 };
 
 int
-blake2b_compress_ref(blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
+sodium_blake2b_compress_ref(sodium_blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
 {
     uint64_t m[16];
     uint64_t v[16];
@@ -40,21 +40,21 @@
     for (i = 0; i < 8; ++i) {
         v[i] = S->h[i];
     }
-    v[8]  = blake2b_IV[0];
-    v[9]  = blake2b_IV[1];
-    v[10] = blake2b_IV[2];
-    v[11] = blake2b_IV[3];
-    v[12] = S->t[0] ^ blake2b_IV[4];
-    v[13] = S->t[1] ^ blake2b_IV[5];
-    v[14] = S->f[0] ^ blake2b_IV[6];
-    v[15] = S->f[1] ^ blake2b_IV[7];
+    v[8]  = sodium_blake2b_IV[0];
+    v[9]  = sodium_blake2b_IV[1];
+    v[10] = sodium_blake2b_IV[2];
+    v[11] = sodium_blake2b_IV[3];
+    v[12] = S->t[0] ^ sodium_blake2b_IV[4];
+    v[13] = S->t[1] ^ sodium_blake2b_IV[5];
+    v[14] = S->f[0] ^ sodium_blake2b_IV[6];
+    v[15] = S->f[1] ^ sodium_blake2b_IV[7];
 #define G(r, i, a, b, c, d)                      \
     do {                                         \
-        a += b + m[blake2b_sigma[r][2 * i + 0]]; \
+        a += b + m[sodium_blake2b_sigma[r][2 * i + 0]]; \
         d = ROTR64(d ^ a, 32);                   \
         c += d;                                  \
         b = ROTR64(b ^ c, 24);                   \
-        a += b + m[blake2b_sigma[r][2 * i + 1]]; \
+        a += b + m[sodium_blake2b_sigma[r][2 * i + 1]]; \
         d = ROTR64(d ^ a, 16);                   \
         c += d;                                  \
         b = ROTR64(b ^ c, 63);                   \
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c	2024-01-29 10:45:34.009126983 -0600
@@ -25,14 +25,14 @@
 # include "blake2b-compress-sse41.h"
 
 CRYPTO_ALIGN(64)
-static const uint64_t blake2b_IV[8] = {
+static const uint64_t sodium_blake2b_IV[8] = {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
     0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
 };
 
 int
-blake2b_compress_sse41(blake2b_state *S,
+sodium_blake2b_compress_sse41(sodium_blake2b_state *S,
                        const uint8_t  block[BLAKE2B_BLOCKBYTES])
 {
     __m128i       row1l, row1h;
@@ -57,10 +57,10 @@
     row1h            = LOADU(&S->h[2]);
     row2l            = LOADU(&S->h[4]);
     row2h            = LOADU(&S->h[6]);
-    row3l            = LOADU(&blake2b_IV[0]);
-    row3h            = LOADU(&blake2b_IV[2]);
-    row4l            = _mm_xor_si128(LOADU(&blake2b_IV[4]), LOADU(&S->t[0]));
-    row4h            = _mm_xor_si128(LOADU(&blake2b_IV[6]), LOADU(&S->f[0]));
+    row3l            = LOADU(&sodium_blake2b_IV[0]);
+    row3h            = LOADU(&sodium_blake2b_IV[2]);
+    row4l            = _mm_xor_si128(LOADU(&sodium_blake2b_IV[4]), LOADU(&S->t[0]));
+    row4h            = _mm_xor_si128(LOADU(&sodium_blake2b_IV[6]), LOADU(&S->f[0]));
     ROUND(0);
     ROUND(1);
     ROUND(2);
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h	2024-01-29 10:40:12.032874929 -0600
@@ -1,6 +1,6 @@
 
-#ifndef blake2b_compress_sse41_H
-#define blake2b_compress_sse41_H
+#ifndef sodium_blake2b_compress_sse41_H
+#define sodium_blake2b_compress_sse41_H
 
 #define LOADU(p) _mm_loadu_si128((const __m128i *) (const void *) (p))
 #define STOREU(p, r) _mm_storeu_si128((__m128i *) (void *) (p), r)
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c	2024-01-29 10:46:51.261029349 -0600
@@ -19,14 +19,14 @@
 # include "blake2b-compress-ssse3.h"
 
 CRYPTO_ALIGN(64)
-static const uint64_t blake2b_IV[8] = {
+static const uint64_t sodium_blake2b_IV[8] = {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
     0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
 };
 
 int
-blake2b_compress_ssse3(blake2b_state *S,
+sodium_blake2b_compress_ssse3(sodium_blake2b_state *S,
                        const uint8_t  block[BLAKE2B_BLOCKBYTES])
 {
     __m128i       row1l, row1h;
@@ -60,10 +60,10 @@
     row1h = LOADU(&S->h[2]);
     row2l = LOADU(&S->h[4]);
     row2h = LOADU(&S->h[6]);
-    row3l = LOADU(&blake2b_IV[0]);
-    row3h = LOADU(&blake2b_IV[2]);
-    row4l = _mm_xor_si128(LOADU(&blake2b_IV[4]), LOADU(&S->t[0]));
-    row4h = _mm_xor_si128(LOADU(&blake2b_IV[6]), LOADU(&S->f[0]));
+    row3l = LOADU(&sodium_blake2b_IV[0]);
+    row3h = LOADU(&sodium_blake2b_IV[2]);
+    row4l = _mm_xor_si128(LOADU(&sodium_blake2b_IV[4]), LOADU(&S->t[0]));
+    row4h = _mm_xor_si128(LOADU(&sodium_blake2b_IV[6]), LOADU(&S->f[0]));
     ROUND(0);
     ROUND(1);
     ROUND(2);
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h	2024-01-29 10:40:12.032874929 -0600
@@ -1,6 +1,6 @@
 
-#ifndef blake2b_compress_ssse3_H
-#define blake2b_compress_ssse3_H
+#ifndef sodium_blake2b_compress_ssse3_H
+#define sodium_blake2b_compress_ssse3_H
 
 #define LOADU(p) _mm_loadu_si128((const __m128i *) (const void *) (p))
 #define STOREU(p, r) _mm_storeu_si128((__m128i *) (void *) (p), r)
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h	2024-01-29 10:40:12.032874929 -0600
@@ -1,5 +1,5 @@
-#ifndef blake2b_load_avx2_H
-#define blake2b_load_avx2_H
+#ifndef sodium_blake2b_load_avx2_H
+#define sodium_blake2b_load_avx2_H
 
 #define BLAKE2B_LOAD_MSG_0_1(b0)               \
     do {                                       \
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h	2024-01-29 10:40:12.032874929 -0600
@@ -13,8 +13,8 @@
    <http://creativecommons.org/publicdomain/zero/1.0/>.
 */
 
-#ifndef blake2b_load_sse2_H
-#define blake2b_load_sse2_H
+#ifndef sodium_blake2b_load_sse2_H
+#define sodium_blake2b_load_sse2_H
 
 #define LOAD_MSG_0_1(b0, b1)     \
     b0 = _mm_set_epi64x(m2, m0); \
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h	2024-01-29 10:40:12.032874929 -0600
@@ -13,8 +13,8 @@
    <http://creativecommons.org/publicdomain/zero/1.0/>.
 */
 
-#ifndef blake2b_load_sse41_H
-#define blake2b_load_sse41_H
+#ifndef sodium_blake2b_load_sse41_H
+#define sodium_blake2b_load_sse41_H
 
 #define LOAD_MSG_0_1(b0, b1)             \
     do {                                 \
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c	2024-01-29 10:44:11.287797759 -0600
@@ -25,9 +25,9 @@
 #include "runtime.h"
 #include "utils.h"
 
-static blake2b_compress_fn blake2b_compress = blake2b_compress_ref;
+static sodium_blake2b_compress_fn sodium_blake2b_compress = sodium_blake2b_compress_ref;
 
-static const uint64_t blake2b_IV[8] = {
+static const uint64_t sodium_blake2b_IV[8] = {
     0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
     0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
     0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
@@ -35,7 +35,7 @@
 
 /* LCOV_EXCL_START */
 static inline int
-blake2b_set_lastnode(blake2b_state *S)
+sodium_blake2b_set_lastnode(sodium_blake2b_state *S)
 {
     S->f[1] = -1;
     return 0;
@@ -43,23 +43,23 @@
 /* LCOV_EXCL_STOP */
 
 static inline int
-blake2b_is_lastblock(const blake2b_state *S)
+sodium_blake2b_is_lastblock(const sodium_blake2b_state *S)
 {
     return S->f[0] != 0;
 }
 
 static inline int
-blake2b_set_lastblock(blake2b_state *S)
+sodium_blake2b_set_lastblock(sodium_blake2b_state *S)
 {
     if (S->last_node) {
-        blake2b_set_lastnode(S);
+        sodium_blake2b_set_lastnode(S);
     }
     S->f[0] = -1;
     return 0;
 }
 
 static inline int
-blake2b_increment_counter(blake2b_state *S, const uint64_t inc)
+sodium_blake2b_increment_counter(sodium_blake2b_state *S, const uint64_t inc)
 {
 #ifdef HAVE_TI_MODE
     uint128_t t = ((uint128_t) S->t[1] << 64) | S->t[0];
@@ -75,14 +75,14 @@
 
 /* Parameter-related functions */
 static inline int
-blake2b_param_set_salt(blake2b_param *P, const uint8_t salt[BLAKE2B_SALTBYTES])
+sodium_blake2b_param_set_salt(sodium_blake2b_param *P, const uint8_t salt[BLAKE2B_SALTBYTES])
 {
     memcpy(P->salt, salt, BLAKE2B_SALTBYTES);
     return 0;
 }
 
 static inline int
-blake2b_param_set_personal(blake2b_param *P,
+sodium_blake2b_param_set_personal(sodium_blake2b_param *P,
                            const uint8_t  personal[BLAKE2B_PERSONALBYTES])
 {
     memcpy(P->personal, personal, BLAKE2B_PERSONALBYTES);
@@ -90,29 +90,29 @@
 }
 
 static inline int
-blake2b_init0(blake2b_state *S)
+sodium_blake2b_init0(sodium_blake2b_state *S)
 {
     int i;
 
     for (i  = 0; i < 8; i++) {
-        S->h[i] = blake2b_IV[i];
+        S->h[i] = sodium_blake2b_IV[i];
     }
     /* zero everything between .t and .last_node */
     memset((void *) &S->t, 0,
-           offsetof(blake2b_state, last_node) + sizeof(S->last_node)
-           - offsetof(blake2b_state, t));
+           offsetof(sodium_blake2b_state, last_node) + sizeof(S->last_node)
+           - offsetof(sodium_blake2b_state, t));
     return 0;
 }
 
 /* init xors IV with input parameter block */
 int
-blake2b_init_param(blake2b_state *S, const blake2b_param *P)
+sodium_blake2b_init_param(sodium_blake2b_state *S, const sodium_blake2b_param *P)
 {
     size_t         i;
     const uint8_t *p;
 
     COMPILER_ASSERT(sizeof *P == 64);
-    blake2b_init0(S);
+    sodium_blake2b_init0(S);
     p = (const uint8_t *) (P);
 
     /* IV XOR ParamBlock */
@@ -123,9 +123,9 @@
 }
 
 int
-blake2b_init(blake2b_state *S, const uint8_t outlen)
+sodium_blake2b_init(sodium_blake2b_state *S, const uint8_t outlen)
 {
-    blake2b_param P[1];
+    sodium_blake2b_param P[1];
 
     if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) {
         sodium_misuse();
@@ -141,14 +141,14 @@
     memset(P->reserved, 0, sizeof(P->reserved));
     memset(P->salt, 0, sizeof(P->salt));
     memset(P->personal, 0, sizeof(P->personal));
-    return blake2b_init_param(S, P);
+    return sodium_blake2b_init_param(S, P);
 }
 
 int
-blake2b_init_salt_personal(blake2b_state *S, const uint8_t outlen,
+sodium_blake2b_init_salt_personal(sodium_blake2b_state *S, const uint8_t outlen,
                            const void *salt, const void *personal)
 {
-    blake2b_param P[1];
+    sodium_blake2b_param P[1];
 
     if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) {
         sodium_misuse();
@@ -163,23 +163,23 @@
     P->inner_length = 0;
     memset(P->reserved, 0, sizeof(P->reserved));
     if (salt != NULL) {
-        blake2b_param_set_salt(P, (const uint8_t *) salt);
+        sodium_blake2b_param_set_salt(P, (const uint8_t *) salt);
     } else {
         memset(P->salt, 0, sizeof(P->salt));
     }
     if (personal != NULL) {
-        blake2b_param_set_personal(P, (const uint8_t *) personal);
+        sodium_blake2b_param_set_personal(P, (const uint8_t *) personal);
     } else {
         memset(P->personal, 0, sizeof(P->personal));
     }
-    return blake2b_init_param(S, P);
+    return sodium_blake2b_init_param(S, P);
 }
 
 int
-blake2b_init_key(blake2b_state *S, const uint8_t outlen, const void *key,
+sodium_blake2b_init_key(sodium_blake2b_state *S, const uint8_t outlen, const void *key,
                  const uint8_t keylen)
 {
-    blake2b_param P[1];
+    sodium_blake2b_param P[1];
 
     if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) {
         sodium_misuse();
@@ -199,25 +199,25 @@
     memset(P->salt, 0, sizeof(P->salt));
     memset(P->personal, 0, sizeof(P->personal));
 
-    if (blake2b_init_param(S, P) < 0) {
+    if (sodium_blake2b_init_param(S, P) < 0) {
         sodium_misuse();
     }
     {
         uint8_t block[BLAKE2B_BLOCKBYTES];
         memset(block, 0, BLAKE2B_BLOCKBYTES);
         memcpy(block, key, keylen); /* key and keylen cannot be 0 */
-        blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
+        sodium_blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
         sodium_memzero(block, BLAKE2B_BLOCKBYTES); /* Burn the key from stack */
     }
     return 0;
 }
 
 int
-blake2b_init_key_salt_personal(blake2b_state *S, const uint8_t outlen,
+sodium_blake2b_init_key_salt_personal(sodium_blake2b_state *S, const uint8_t outlen,
                                const void *key, const uint8_t keylen,
                                const void *salt, const void *personal)
 {
-    blake2b_param P[1];
+    sodium_blake2b_param P[1];
 
     if ((!outlen) || (outlen > BLAKE2B_OUTBYTES)) {
         sodium_misuse();
@@ -235,24 +235,24 @@
     P->inner_length = 0;
     memset(P->reserved, 0, sizeof(P->reserved));
     if (salt != NULL) {
-        blake2b_param_set_salt(P, (const uint8_t *) salt);
+        sodium_blake2b_param_set_salt(P, (const uint8_t *) salt);
     } else {
         memset(P->salt, 0, sizeof(P->salt));
     }
     if (personal != NULL) {
-        blake2b_param_set_personal(P, (const uint8_t *) personal);
+        sodium_blake2b_param_set_personal(P, (const uint8_t *) personal);
     } else {
         memset(P->personal, 0, sizeof(P->personal));
     }
 
-    if (blake2b_init_param(S, P) < 0) {
+    if (sodium_blake2b_init_param(S, P) < 0) {
         sodium_misuse();
     }
     {
         uint8_t block[BLAKE2B_BLOCKBYTES];
         memset(block, 0, BLAKE2B_BLOCKBYTES);
         memcpy(block, key, keylen); /* key and keylen cannot be 0 */
-        blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
+        sodium_blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
         sodium_memzero(block, BLAKE2B_BLOCKBYTES); /* Burn the key from stack */
     }
     return 0;
@@ -260,7 +260,7 @@
 
 /* inlen now in bytes */
 int
-blake2b_update(blake2b_state *S, const uint8_t *in, uint64_t inlen)
+sodium_blake2b_update(sodium_blake2b_state *S, const uint8_t *in, uint64_t inlen)
 {
     while (inlen > 0) {
         size_t left = S->buflen;
@@ -269,8 +269,8 @@
         if (inlen > fill) {
             memcpy(S->buf + left, in, fill); /* Fill buffer */
             S->buflen += fill;
-            blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
-            blake2b_compress(S, S->buf); /* Compress */
+            sodium_blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+            sodium_blake2b_compress(S, S->buf); /* Compress */
             memcpy(S->buf, S->buf + BLAKE2B_BLOCKBYTES,
                    BLAKE2B_BLOCKBYTES); /* Shift buffer left */
             S->buflen -= BLAKE2B_BLOCKBYTES;
@@ -289,29 +289,29 @@
 }
 
 int
-blake2b_final(blake2b_state *S, uint8_t *out, uint8_t outlen)
+sodium_blake2b_final(sodium_blake2b_state *S, uint8_t *out, uint8_t outlen)
 {
     unsigned char buffer[BLAKE2B_OUTBYTES];
 
     if (!outlen || outlen > BLAKE2B_OUTBYTES) {
         sodium_misuse();
     }
-    if (blake2b_is_lastblock(S)) {
+    if (sodium_blake2b_is_lastblock(S)) {
         return -1;
     }
     if (S->buflen > BLAKE2B_BLOCKBYTES) {
-        blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
-        blake2b_compress(S, S->buf);
+        sodium_blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+        sodium_blake2b_compress(S, S->buf);
         S->buflen -= BLAKE2B_BLOCKBYTES;
         assert(S->buflen <= BLAKE2B_BLOCKBYTES);
         memcpy(S->buf, S->buf + BLAKE2B_BLOCKBYTES, S->buflen);
     }
 
-    blake2b_increment_counter(S, S->buflen);
-    blake2b_set_lastblock(S);
+    sodium_blake2b_increment_counter(S, S->buflen);
+    sodium_blake2b_set_lastblock(S);
     memset(S->buf + S->buflen, 0,
            2 * BLAKE2B_BLOCKBYTES - S->buflen); /* Padding */
-    blake2b_compress(S, S->buf);
+    sodium_blake2b_compress(S, S->buf);
 
     COMPILER_ASSERT(sizeof buffer == 64U);
     STORE64_LE(buffer + 8 * 0, S->h[0]);
@@ -332,10 +332,10 @@
 
 /* inlen, at least, should be uint64_t. Others can be size_t. */
 int
-blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
+sodium_blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
         const uint64_t inlen, uint8_t keylen)
 {
-    CRYPTO_ALIGN(64) blake2b_state S[1];
+    CRYPTO_ALIGN(64) sodium_blake2b_state S[1];
 
     /* Verify parameters */
     if (NULL == in && inlen > 0) {
@@ -354,26 +354,26 @@
         sodium_misuse();
     }
     if (keylen > 0) {
-        if (blake2b_init_key(S, outlen, key, keylen) < 0) {
+        if (sodium_blake2b_init_key(S, outlen, key, keylen) < 0) {
             sodium_misuse();
         }
     } else {
-        if (blake2b_init(S, outlen) < 0) {
+        if (sodium_blake2b_init(S, outlen) < 0) {
             sodium_misuse();
         }
     }
 
-    blake2b_update(S, (const uint8_t *) in, inlen);
-    blake2b_final(S, out, outlen);
+    sodium_blake2b_update(S, (const uint8_t *) in, inlen);
+    sodium_blake2b_final(S, out, outlen);
     return 0;
 }
 
 int
-blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
+sodium_blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
                       const uint8_t outlen, const uint64_t inlen,
                       uint8_t keylen, const void *salt, const void *personal)
 {
-    CRYPTO_ALIGN(64) blake2b_state S[1];
+    CRYPTO_ALIGN(64) sodium_blake2b_state S[1];
 
     /* Verify parameters */
     if (NULL == in && inlen > 0) {
@@ -392,46 +392,46 @@
         sodium_misuse();
     }
     if (keylen > 0) {
-        if (blake2b_init_key_salt_personal(S, outlen, key, keylen, salt,
+        if (sodium_blake2b_init_key_salt_personal(S, outlen, key, keylen, salt,
                                            personal) < 0) {
             sodium_misuse();
         }
     } else {
-        if (blake2b_init_salt_personal(S, outlen, salt, personal) < 0) {
+        if (sodium_blake2b_init_salt_personal(S, outlen, salt, personal) < 0) {
             sodium_misuse();
         }
     }
 
-    blake2b_update(S, (const uint8_t *) in, inlen);
-    blake2b_final(S, out, outlen);
+    sodium_blake2b_update(S, (const uint8_t *) in, inlen);
+    sodium_blake2b_final(S, out, outlen);
     return 0;
 }
 
 int
-blake2b_pick_best_implementation(void)
+sodium_blake2b_pick_best_implementation(void)
 {
 /* LCOV_EXCL_START */
 #if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_TMMINTRIN_H) && \
     defined(HAVE_SMMINTRIN_H)
     if (sodium_runtime_has_avx2()) {
-        blake2b_compress = blake2b_compress_avx2;
+        sodium_blake2b_compress = sodium_blake2b_compress_avx2;
         return 0;
     }
 #endif
 #if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && \
     defined(HAVE_SMMINTRIN_H)
     if (sodium_runtime_has_sse41()) {
-        blake2b_compress = blake2b_compress_sse41;
+        sodium_blake2b_compress = sodium_blake2b_compress_sse41;
         return 0;
     }
 #endif
 #if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
     if (sodium_runtime_has_ssse3()) {
-        blake2b_compress = blake2b_compress_ssse3;
+        sodium_blake2b_compress = sodium_blake2b_compress_ssse3;
         return 0;
     }
 #endif
-    blake2b_compress = blake2b_compress_ref;
+    sodium_blake2b_compress = sodium_blake2b_compress_ref;
 
     return 0;
     /* LCOV_EXCL_STOP */
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2.h libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2.h
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/blake2.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/blake2.h	2024-01-29 10:40:12.032874929 -0600
@@ -23,7 +23,7 @@
 #include "crypto_generichash_blake2b.h"
 #include "export.h"
 
-enum blake2b_constant {
+enum sodium_blake2b_constant {
     BLAKE2B_BLOCKBYTES    = 128,
     BLAKE2B_OUTBYTES      = 64,
     BLAKE2B_KEYBYTES      = 64,
@@ -39,7 +39,7 @@
 # pragma pack(push, 1)
 #endif
 
-typedef struct blake2b_param_ {
+typedef struct sodium_blake2b_param_ {
     uint8_t digest_length;                   /*  1 */
     uint8_t key_length;                      /*  2 */
     uint8_t fanout;                          /*  3 */
@@ -51,16 +51,16 @@
     uint8_t reserved[14];                    /* 32 */
     uint8_t salt[BLAKE2B_SALTBYTES];         /* 48 */
     uint8_t personal[BLAKE2B_PERSONALBYTES]; /* 64 */
-} blake2b_param;
+} sodium_blake2b_param;
 
-typedef struct blake2b_state {
+typedef struct sodium_blake2b_state {
     uint64_t h[8];
     uint64_t t[2];
     uint64_t f[2];
     uint8_t  buf[2 * 128];
     size_t   buflen;
     uint8_t  last_node;
-} blake2b_state;
+} sodium_blake2b_state;
 
 #ifdef __IBMC__
 # pragma pack(pop)
@@ -71,36 +71,36 @@
 #endif
 
 /* Streaming API */
-int blake2b_init(blake2b_state *S, const uint8_t outlen);
-int blake2b_init_salt_personal(blake2b_state *S, const uint8_t outlen,
+int sodium_blake2b_init(sodium_blake2b_state *S, const uint8_t outlen);
+int sodium_blake2b_init_salt_personal(sodium_blake2b_state *S, const uint8_t outlen,
                                const void *salt, const void *personal);
-int blake2b_init_key(blake2b_state *S, const uint8_t outlen, const void *key,
+int sodium_blake2b_init_key(sodium_blake2b_state *S, const uint8_t outlen, const void *key,
                      const uint8_t keylen);
-int blake2b_init_key_salt_personal(blake2b_state *S, const uint8_t outlen,
+int sodium_blake2b_init_key_salt_personal(sodium_blake2b_state *S, const uint8_t outlen,
                                    const void *key, const uint8_t keylen,
                                    const void *salt, const void *personal);
-int blake2b_init_param(blake2b_state *S, const blake2b_param *P);
-int blake2b_update(blake2b_state *S, const uint8_t *in, uint64_t inlen);
-int blake2b_final(blake2b_state *S, uint8_t *out, uint8_t outlen);
+int sodium_blake2b_init_param(sodium_blake2b_state *S, const sodium_blake2b_param *P);
+int sodium_blake2b_update(sodium_blake2b_state *S, const uint8_t *in, uint64_t inlen);
+int sodium_blake2b_final(sodium_blake2b_state *S, uint8_t *out, uint8_t outlen);
 
 /* Simple API */
-int blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
+int sodium_blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
             const uint64_t inlen, uint8_t keylen);
-int blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
+int sodium_blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
                           const uint8_t outlen, const uint64_t inlen,
                           uint8_t keylen, const void *salt,
                           const void *personal);
 
-typedef int (*blake2b_compress_fn)(blake2b_state *S,
+typedef int (*sodium_blake2b_compress_fn)(sodium_blake2b_state *S,
                                    const uint8_t  block[BLAKE2B_BLOCKBYTES]);
-int blake2b_pick_best_implementation(void);
-int blake2b_compress_ref(blake2b_state *S,
+int sodium_blake2b_pick_best_implementation(void);
+int sodium_blake2b_compress_ref(sodium_blake2b_state *S,
                          const uint8_t  block[BLAKE2B_BLOCKBYTES]);
-int blake2b_compress_ssse3(blake2b_state *S,
+int sodium_blake2b_compress_ssse3(sodium_blake2b_state *S,
                            const uint8_t  block[BLAKE2B_BLOCKBYTES]);
-int blake2b_compress_sse41(blake2b_state *S,
+int sodium_blake2b_compress_sse41(sodium_blake2b_state *S,
                            const uint8_t  block[BLAKE2B_BLOCKBYTES]);
-int blake2b_compress_avx2(blake2b_state *S,
+int sodium_blake2b_compress_avx2(sodium_blake2b_state *S,
                           const uint8_t  block[BLAKE2B_BLOCKBYTES]);
 
 #endif
diff -urN libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c
--- libsodium-stable/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c	2024-01-29 10:40:12.032874929 -0600
@@ -20,7 +20,7 @@
     assert(outlen <= UINT8_MAX);
     assert(keylen <= UINT8_MAX);
 
-    return blake2b((uint8_t *) out, in, key, (uint8_t) outlen, (uint64_t) inlen,
+    return sodium_blake2b((uint8_t *) out, in, key, (uint8_t) outlen, (uint64_t) inlen,
                    (uint8_t) keylen);
 }
 
@@ -37,7 +37,7 @@
     assert(outlen <= UINT8_MAX);
     assert(keylen <= UINT8_MAX);
 
-    return blake2b_salt_personal((uint8_t *) out, in, key, (uint8_t) outlen,
+    return sodium_blake2b_salt_personal((uint8_t *) out, in, key, (uint8_t) outlen,
                                  (uint64_t) inlen, (uint8_t) keylen, salt,
                                  personal);
 }
@@ -53,12 +53,12 @@
     }
     assert(outlen <= UINT8_MAX);
     assert(keylen <= UINT8_MAX);
-    COMPILER_ASSERT(sizeof(blake2b_state) <= sizeof *state);
+    COMPILER_ASSERT(sizeof(sodium_blake2b_state) <= sizeof *state);
     if (key == NULL || keylen <= 0U) {
-        if (blake2b_init((blake2b_state *) (void *) state, (uint8_t) outlen) != 0) {
+        if (sodium_blake2b_init((sodium_blake2b_state *) (void *) state, (uint8_t) outlen) != 0) {
             return -1; /* LCOV_EXCL_LINE */
         }
-    } else if (blake2b_init_key((blake2b_state *) (void *) state, (uint8_t) outlen, key,
+    } else if (sodium_blake2b_init_key((sodium_blake2b_state *) (void *) state, (uint8_t) outlen, key,
                                 (uint8_t) keylen) != 0) {
         return -1; /* LCOV_EXCL_LINE */
     }
@@ -78,11 +78,11 @@
     assert(outlen <= UINT8_MAX);
     assert(keylen <= UINT8_MAX);
     if (key == NULL || keylen <= 0U) {
-        if (blake2b_init_salt_personal((blake2b_state *) (void *) state,
+        if (sodium_blake2b_init_salt_personal((sodium_blake2b_state *) (void *) state,
                                        (uint8_t) outlen, salt, personal) != 0) {
             return -1; /* LCOV_EXCL_LINE */
         }
-    } else if (blake2b_init_key_salt_personal((blake2b_state *) (void *) state,
+    } else if (sodium_blake2b_init_key_salt_personal((sodium_blake2b_state *) (void *) state,
                                               (uint8_t) outlen, key,
                                               (uint8_t) keylen, salt,
                                               personal) != 0) {
@@ -96,7 +96,7 @@
                                   const unsigned char *in,
                                   unsigned long long inlen)
 {
-    return blake2b_update((blake2b_state *) (void *) state,
+    return sodium_blake2b_update((sodium_blake2b_state *) (void *) state,
                           (const uint8_t *) in, (uint64_t) inlen);
 }
 
@@ -105,12 +105,12 @@
                                  unsigned char *out, const size_t outlen)
 {
     assert(outlen <= UINT8_MAX);
-    return blake2b_final((blake2b_state *) (void *) state,
+    return sodium_blake2b_final((sodium_blake2b_state *) (void *) state,
                          (uint8_t *) out, (uint8_t) outlen);
 }
 
 int
 _crypto_generichash_blake2b_pick_best_implementation(void)
 {
-    return blake2b_pick_best_implementation();
+    return sodium_blake2b_pick_best_implementation();
 }
diff -urN libsodium-stable/src/libsodium/crypto_pwhash/argon2/argon2-core.c libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/argon2-core.c
--- libsodium-stable/src/libsodium/crypto_pwhash/argon2/argon2-core.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/argon2-core.c	2024-01-29 10:40:12.042873881 -0600
@@ -210,7 +210,7 @@
         {
             uint8_t blockhash_bytes[ARGON2_BLOCK_SIZE];
             store_block(blockhash_bytes, &blockhash);
-            blake2b_long(context->out, context->outlen, blockhash_bytes,
+            sodium_blake2b_long(context->out, context->outlen, blockhash_bytes,
                          ARGON2_BLOCK_SIZE);
             sodium_memzero(blockhash.v,
                            ARGON2_BLOCK_SIZE); /* clear blockhash */
@@ -379,13 +379,13 @@
     for (l = 0; l < instance->lanes; ++l) {
         STORE32_LE(blockhash + ARGON2_PREHASH_DIGEST_LENGTH, 0);
         STORE32_LE(blockhash + ARGON2_PREHASH_DIGEST_LENGTH + 4, l);
-        blake2b_long(blockhash_bytes, ARGON2_BLOCK_SIZE, blockhash,
+        sodium_blake2b_long(blockhash_bytes, ARGON2_BLOCK_SIZE, blockhash,
                      ARGON2_PREHASH_SEED_LENGTH);
         load_block(&instance->region->memory[l * instance->lane_length + 0],
                    blockhash_bytes);
 
         STORE32_LE(blockhash + ARGON2_PREHASH_DIGEST_LENGTH, 1);
-        blake2b_long(blockhash_bytes, ARGON2_BLOCK_SIZE, blockhash,
+        sodium_blake2b_long(blockhash_bytes, ARGON2_BLOCK_SIZE, blockhash,
                      ARGON2_PREHASH_SEED_LENGTH);
         load_block(&instance->region->memory[l * instance->lane_length + 1],
                    blockhash_bytes);
diff -urN libsodium-stable/src/libsodium/crypto_pwhash/argon2/blake2b-long.c libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/blake2b-long.c
--- libsodium-stable/src/libsodium/crypto_pwhash/argon2/blake2b-long.c	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/blake2b-long.c	2024-01-29 10:47:12.508802106 -0600
@@ -10,7 +10,7 @@
 #include "blake2b-long.h"
 
 int
-blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen)
+sodium_blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen)
 {
     uint8_t *out = (uint8_t *) pout;
     crypto_generichash_blake2b_state blake_state;
diff -urN libsodium-stable/src/libsodium/crypto_pwhash/argon2/blake2b-long.h libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/blake2b-long.h
--- libsodium-stable/src/libsodium/crypto_pwhash/argon2/blake2b-long.h	2023-09-13 08:46:16.000000000 -0500
+++ libsodium-stable.patched/src/libsodium/crypto_pwhash/argon2/blake2b-long.h	2024-01-29 10:40:12.042873881 -0600
@@ -1,8 +1,8 @@
-#ifndef blake2b_long_H
-#define blake2b_long_H
+#ifndef sodium_blake2b_long_H
+#define sodium_blake2b_long_H
 
 #include <stddef.h>
 
-int blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen);
+int sodium_blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen);
 
 #endif
